import React from "react";
import { SeasonDetails } from "../../../../../interface";
import Body from "../../../../components/Body";
import Head from "next/head";
import { getSeasonDetails } from "../../../api/movie";
import Image from "next/legacy/image";

interface ISeasonDetails {
  seasonDetails: SeasonDetails;
}
const TVSeasonPage = ({ seasonDetails }: ISeasonDetails) => {
  return (
    <Body>
      <Head>
        <title>{seasonDetails.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col gap-2 pl-4 pt-4 md:flex-row">
        <div className="flex-[0.4]">
          <h1 className="text-lg font-bold">{seasonDetails.name}</h1>
          {/* https://developer.themoviedb.org/docs/image-basics */}
          {/* https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg "poster_path" */}
          <Image
            src={`https://image.tmdb.org/t/p/original${seasonDetails.poster_path}`}
            width={300}
            height={350}
            alt={seasonDetails.name}
            className="w-full"
            objectFit="cover"
          />
        </div>
        <div className="flex-[0.7] space-y-2 pt-2">
          <div>
            <h1 className=" text-lg font-bold">Overview</h1>

            <p className="text-sm md:text-base">{seasonDetails.overview}</p>
          </div>
          <div>
            <h1 className="text-lg font-bold">Episodes</h1>
            <ul className="grid grid-cols-4 gap-4">
              {seasonDetails.episodes.map((episode) => (
                <li key={episode.id} className="flex flex-col">
                  <Image
                    src={`https://image.tmdb.org/t/p/original${episode.still_path}`}
                    width={100}
                    height={100}
                    objectFit="cover"
                    alt={episode.name}
                  />
                  <span className="truncate text-xs md:text-sm">
                    {episode.name}
                  </span>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </Body>
  );
};

// If a page has Dynamic Routes and uses getStaticProps,
// The page must be pre-rendered (for SEO) and be very fast.
// getStaticPaths will only run during build in production, it will not be called during runtime
export async function getStaticPaths() {
  return {
    paths: [{ params: { seasonId: "sth-else", tvId: "sth-else" } }],
    fallback: "blocking", //  fallback: true, // false or "blocking"
  };
}

export const getStaticProps = async ({ params }: any) => {
  const seasonDetails = await getSeasonDetails(params.tvId, params.seasonId);
  return {
    props: {
      seasonDetails,
    },
  };
};

export default TVSeasonPage;
