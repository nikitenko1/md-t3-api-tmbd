import React, { useEffect, useState } from "react";
import { Cast, Movie, MovieReview, TVDetails } from "../../../../interface";
import { useRouter } from "next/router";
import useFavourites from "../../../../hooks/useFavourites";
import Body from "../../../components/Body";
import Head from "next/head";
import Image from "next/legacy/image";
import {
  getAiringTodayTvShows,
  getOnTheAirTvShows,
  getReviews,
  getSimilarTVShows,
  getTVCasts,
  getTVDetails,
  getTrendingTvShows,
} from "../../api/movie";
import { AiFillHeart } from "react-icons/ai";
import { BiHeart } from "react-icons/bi";
import Link from "next/link";
import Poster from "../../../components/Poster";
import ReviewCard from "../../../components/ReviewCard";

interface ITV {
  tvDetails: TVDetails;
  similarTvShows: Movie[];
  tvCasts: Cast[];
  tvReviews: MovieReview[];
}

const TVDetailsPage = ({
  tvDetails,
  similarTvShows,
  tvCasts,
  tvReviews,
}: ITV) => {
  const router = useRouter();
  const { tvId } = router.query;
  const [showMoreSeasons, setShowMoreSeasons] = useState<boolean>(false);
  const [showMoreCasts, setShowMoreCasts] = useState<boolean>(false);

  useEffect(() => {
    setShowMoreSeasons(false);
    setShowMoreCasts(false);
  }, []);

  const {
    handleAddFavourite,
    favorited,
    handleDeleteFavourite,
    addedToFavourites,
  } = useFavourites(tvDetails);

  return (
    <Body>
      <Head>
        <title>{tvDetails.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="relative">
        <div className="mx-auto h-auto w-[50%]">
          <Image
            src={`https://image.tmdb.org/t/p/original${tvDetails.poster_path}`}
            alt={tvDetails.title}
            width="0"
            height="0"
            sizes="100vw"
            layout="responsive"
            objectFit="contain"
          />
        </div>

        <div
          className="mx-auto -mt-20 w-[90%] space-y-2 rounded-lg bg-black/30 px-2 py-4
         text-white backdrop-sepia-0"
        >
          <div className="flex items-center justify-between">
            <h1 className="text-lg font-semibold md:text-xl">
              {tvDetails.name}
            </h1>
            {addedToFavourites || favorited ? (
              <AiFillHeart
                size={24}
                className="cursor-pointer"
                onClick={() => handleDeleteFavourite()}
                color="#EC1C24"
              />
            ) : (
              <BiHeart
                size={24}
                className="cursor-pointer"
                onClick={() =>
                  handleAddFavourite(
                    tvDetails.vote_average,
                    tvDetails.name,
                    tvDetails.poster_path as string,
                    tvDetails.id,
                    tvDetails.first_air_date
                  )
                }
              />
            )}
          </div>
          <div className="flex items-center gap-2">
            <p className="font-bold">Genres:</p>
            {tvDetails.genres.map((genre, i) => (
              <p key={genre.id} className=" text-sm md:text-base">
                {!(i === tvDetails.genres.length - 1)
                  ? genre.name + ","
                  : genre.name}
              </p>
            ))}
          </div>
          <p className="font-bold">
            Seasons:{" "}
            <span className="text-sm font-normal md:text-base">
              {tvDetails.number_of_seasons} seasons
            </span>
          </p>
          <p className="font-bold">
            Episodes:{" "}
            <span className="text-sm font-normal md:text-base">
              {tvDetails.number_of_episodes} episodes
            </span>
          </p>
          <div>
            <p className="font-bold">
              Rating:{" "}
              <span className="text-sm font-normal md:text-base">
                {tvDetails.vote_average}
              </span>
            </p>
          </div>
          <div className="flex items-center justify-between gap-2">
            {tvDetails.networks.map((network) => (
              <Image
                className="grayscale transition-all duration-150 ease-in-out hover:grayscale-0"
                src={`https://image.tmdb.org/t/p/original${network.logo_path}`}
                alt={network.name}
                key={network.id}
                width={50}
                height={50}
                objectFit="contain"
              />
            ))}
          </div>
        </div>
        <div className="space-y-6 px-4 py-2 text-gray-500 md:px-8 md:py-4">
          <div>
            <h1 className="text-lg font-bold">Plot</h1>
            <p className="text-sm md:text-base">{tvDetails.overview}</p>
          </div>
          <div className="space-y-2">
            {tvDetails.seasons.length !== 0 && (
              <>
                <h1 className="text-lg font-bold">Seasons</h1>{" "}
                <div className="grid grid-cols-4 gap-4">
                  {tvDetails.seasons
                    .slice(0, showMoreSeasons ? tvDetails.seasons.length : 4)
                    .map((season) => (
                      <Link
                        key={season.id}
                        href={`/tv-series/${tvId}/season/${season.season_number}`}
                      >
                        <div className="cursor-pointer">
                          {/* https://developer.themoviedb.org/docs/image-basics */}
                          {/* https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg "poster_path" */}
                          <Image
                            alt={season.name}
                            src={`https://image.tmdb.org/t/p/original/${season.poster_path}`}
                            width={200}
                            height={200}
                            objectFit="cover"
                          />
                          <div className="px-2">
                            <p className="truncate">{season.name}</p>
                          </div>
                        </div>
                      </Link>
                    ))}
                </div>
                <p
                  className="mt-4 cursor-pointer text-center"
                  onClick={() => setShowMoreSeasons(!showMoreSeasons)}
                >
                  {showMoreSeasons ? "Show less" : "Show more"}
                </p>
              </>
            )}
          </div>
          <div className="space-y-2">
            <h1 className="text-xl font-bold">Casts</h1>
            <div className="grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-6">
              {tvCasts.slice(0, showMoreCasts ? 15 : 6).map((cast) => (
                <div key={cast.id} className="flex flex-col space-y-2">
                  <Image
                    alt={cast.name}
                    src={`https://image.tmdb.org/t/p/original/${cast.profile_path}`}
                    width={150}
                    height={200}
                    objectFit="cover"
                    className="mb-2 rounded-md"
                  />
                  <div>
                    <p className="text-white">{cast.name}</p>
                    <p className="truncate">{cast.character}</p>
                  </div>
                </div>
              ))}
            </div>
            <p
              className="mx-auto w-16 cursor-pointer whitespace-nowrap"
              onClick={() => setShowMoreCasts(!showMoreCasts)}
            >
              {showMoreCasts ? "Show less" : "Show more"}
            </p>
          </div>
          <div className="space-y-2">
            <h1 className="text-lg font-bold">Similar TV Shows</h1>
            <div
              className="row scrollbar-thumb-gray-800 scrollbar-thin scrollbar-track-gray-none 
              scrollbar-thumb-rounded-md rounded"
            >
              {similarTvShows.map((show) => (
                <Poster
                  key={show.id}
                  movie={show}
                  size="normal"
                  type="tv-series"
                />
              ))}
            </div>
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Reviews</h1>
            </div>
            {tvReviews.length !== 0 ? (
              <div className="space-y-8 divide-y divide-gray-500">
                {tvReviews.map((review) => (
                  <ReviewCard key={review.id} review={review} />
                ))}
              </div>
            ) : (
              <p>No reviews</p>
            )}
            <div></div>
          </div>
        </div>
      </div>
    </Body>
  );
};

// If a page has Dynamic Routes and uses getStaticProps,
// The page must be pre-rendered (for SEO) and be very fast.
// getStaticPaths will only run during build in production, it will not be called during runtime
export const getStaticPaths = async () => {
  const [trendingTvShows, airingToday, onTheAir] = [
    await getTrendingTvShows(),
    await getAiringTodayTvShows(),
    await getOnTheAirTvShows(),
  ];

  const trendingIds = trendingTvShows.map((tv: Movie) => tv.id);
  const airingIds = airingToday.map((tv: Movie) => tv.id);
  const onTheAirIds = onTheAir.map((tv: Movie) => tv.id);

  const ids = [...trendingIds, ...airingIds, ...onTheAirIds];

  const paths = ids.map((id) => ({
    params: {
      tvId: id.toString(),
    },
  }));

  return {
    paths,
    fallback: "blocking", //  fallback: true, // false or "blocking"
  };
};

export const getStaticProps = async ({ params }: any) => {
  const [tvDetails, similarTvShows, tvCasts, tvReviews] = [
    await getTVDetails(params.tvId),
    await getSimilarTVShows(params.tvId),
    await getTVCasts(params.tvId),
    await getReviews(params.tvId, "tv"),
  ];

  return {
    props: {
      tvDetails: tvDetails || null,
      similarTvShows: similarTvShows || null,
      tvCasts: tvCasts || null,
      tvReviews: tvReviews || null,
    },
  };
};

export default TVDetailsPage;
