import React, { useEffect, useState } from "react";
import { Cast, Movie, MovieDetails, MovieReview } from "../../../interface";
import useFavourites from "../../../hooks/useFavourites";
import Body from "../../components/Body";
import Head from "next/head";
import Image from "next/legacy/image";
import {
  getCredits,
  getMovieDetails,
  getNowPlaying,
  getPopular,
  getRecommendations,
  getReviews,
  getSimilar,
  getTopRated,
  getTrendingMovies,
} from "../api/movie";
import { AiFillHeart } from "react-icons/ai";
import { BiHeart } from "react-icons/bi";
import Poster from "../../components/Poster";
import ReviewCard from "../../components/ReviewCard";

interface IMovieDetails {
  movieDetails: MovieDetails;
  movieRecommendations: Movie[];
  movieCasts: Cast[];
  movieSimilar: Movie[];
  movieReviews: MovieReview[];
}

const MovieDetailsPage = ({
  movieDetails,
  movieRecommendations,
  movieCasts,
  movieSimilar,
  movieReviews,
}: IMovieDetails) => {
  const [showMoreCasts, setShowMoreCasts] = useState<boolean>(false);
  const [showMoreRecommendations, setShowMoreRecommendations] =
    useState<boolean>(false);

  useEffect(() => {
    setShowMoreRecommendations(false);
    setShowMoreCasts(false);
  }, []);

  const {
    handleAddFavourite,
    favorited,
    handleDeleteFavourite,
    addedToFavourites,
  } = useFavourites(movieDetails);

  return (
    <Body>
      <Head>
        <title>{movieDetails.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="relative">
        <div className="mx-auto h-auto w-[50%]">
          <Image
            src={`https://image.tmdb.org/t/p/original${movieDetails.poster_path}`}
            alt={movieDetails.title}
            width="0"
            height="0"
            sizes="100vw"
            className="h-auto w-full"
            layout="responsive"
            objectFit="contain"
          />
        </div>

        <div
          className="mx-auto -mt-20 w-[90%] space-y-2 rounded-lg bg-black/30 
        px-2 py-2 text-white backdrop-sepia-0 md:py-4"
        >
          <div className="flex items-center justify-between">
            <h1 className="text-lg font-semibold md:text-xl">
              {movieDetails.title}
            </h1>
            {addedToFavourites || favorited ? (
              <AiFillHeart
                size={24}
                color="#EC1C24"
                className="cursor-pointer"
                onClick={() => handleDeleteFavourite()}
              />
            ) : (
              <BiHeart
                size={24}
                className="cursor-pointer"
                onClick={() =>
                  handleAddFavourite(
                    movieDetails.vote_average,
                    movieDetails.title,
                    movieDetails.backdrop_path as string,
                    movieDetails.id,
                    movieDetails.release_date
                  )
                }
              />
            )}
          </div>
          <div className="flex items-center gap-2">
            <p className="font-bold">Genres:</p>
            {movieDetails.genres.map((genre, i) => (
              <p key={genre.id} className="text-sm md:text-base">
                {!(i === movieDetails.genres.length - 1)
                  ? genre.name + ","
                  : genre.name}
              </p>
            ))}
          </div>
          <div>
            <p className="font-bold">
              Duration:{" "}
              <span className="text-sm font-normal md:text-base">
                {movieDetails.runtime} minutes
              </span>
            </p>
          </div>
          <div>
            <p className="font-bold">
              Rating:{" "}
              <span className="text-sm font-normal md:text-base">
                {movieDetails.vote_average}
              </span>
            </p>
          </div>
        </div>
      </div>
      <div className="space-y-6 px-4 py-2 text-gray-500 md:px-8 md:py-4">
        <div>
          <h1 className="text-xl font-bold">Plot</h1>
          <p className="text-sm md:text-base">{movieDetails.overview}</p>
        </div>
        <div className="space-y-2">
          <h1 className="text-xl font-bold">Casts</h1>
          <div className="grid grid-cols-2 gap-3 sm:grid-cols-3 lg:grid-cols-6">
            {movieCasts.slice(0, showMoreCasts ? 15 : 6).map((cast) => (
              <div key={cast.id} className="flex flex-col space-y-2">
                <Image
                  alt={cast.name}
                  src={`https://image.tmdb.org/t/p/original/${cast.profile_path}`}
                  width={150}
                  objectFit="cover"
                  height={200}
                  className="mb-2 rounded-md"
                />
                <div>
                  <p className="text-sm text-white md:text-base">{cast.name}</p>
                  <p className="truncate text-sm md:text-base">
                    {cast.character}
                  </p>
                </div>
              </div>
            ))}
            <p
              className="mx-auto w-16 cursor-pointer whitespace-nowrap"
              onClick={() => setShowMoreCasts(!showMoreCasts)}
            >
              {showMoreCasts ? "Show less" : "Show more"}
            </p>
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <h1 className="text-lg font-bold md:text-xl">
                Recommendations for you
              </h1>
              <p
                className="cursor-pointer whitespace-nowrap"
                onClick={() =>
                  setShowMoreRecommendations(!showMoreRecommendations)
                }
              >
                {showMoreRecommendations ? "Show less" : "Show more"}
              </p>
            </div>
            <div className="row  scrollbar-thumb-gray-800 scrollbar-thin scrollbar-track-gray-100">
              {movieRecommendations
                .slice(0, showMoreRecommendations ? 12 : 2)
                .map((movie) => (
                  <Poster
                    type="movie"
                    key={movie.id}
                    movie={movie}
                    size="big"
                  />
                ))}
            </div>
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Similar Movies</h1>
              <p
                className="cursor-pointer"
                onClick={() =>
                  setShowMoreRecommendations(!showMoreRecommendations)
                }
              >
                {showMoreRecommendations ? "Show less" : "Show more"}
              </p>
            </div>
            <div className="row  scrollbar-thumb-gray-800 scrollbar-thin scrollbar-track-gray-100">
              {movieSimilar.map((movie) => (
                <Poster
                  key={movie.id}
                  movie={movie}
                  size="normal"
                  type="movie"
                />
              ))}
            </div>
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <h1 className="text-xl font-bold">Reviews</h1>
              <p
                className="cursor-pointer"
                onClick={() =>
                  setShowMoreRecommendations(!showMoreRecommendations)
                }
              >
                {showMoreRecommendations ? "Show less" : "Show more"}
              </p>
            </div>
            {movieReviews.length !== 0 ? (
              <div className="space-y-8 divide-y divide-gray-500">
                {movieReviews.map((review) => (
                  <ReviewCard key={review.id} review={review} />
                ))}
              </div>
            ) : (
              <p>No reviews</p>
            )}

            <div></div>
          </div>
        </div>
      </div>
    </Body>
  );
};

// If a page has Dynamic Routes and uses getStaticProps,
// The page must be pre-rendered (for SEO) and be very fast.
// getStaticPaths will only run during build in production, it will not be called during runtime
export const getStaticPaths = async () => {
  const [trendingMovies, nowPlayingMovies, topRatedMovies, popularMovies] = [
    await getTrendingMovies(),
    await getNowPlaying(),
    await getTopRated(),
    await getPopular(),
  ];

  const trendingIds = trendingMovies.map((movie: Movie) => movie.id);
  const nowPlayingIds = nowPlayingMovies.map((movie: Movie) => movie.id);
  const topRatedIds = topRatedMovies.map((movie: Movie) => movie.id);
  const popularIds = popularMovies.map((movie: Movie) => movie.id);

  const ids = [...trendingIds, ...nowPlayingIds, ...topRatedIds, ...popularIds];

  const paths = ids.map((id) => ({
    params: {
      movieId: id.toString(),
    },
  }));

  return {
    paths,
    fallback: "blocking", //  fallback: true, // false or "blocking"
  };
};

export const getStaticProps = async ({ params }: any) => {
  const [
    movieDetails,
    movieRecommendations,
    movieCasts,
    movieSimilar,
    movieReviews,
  ] = [
    await getMovieDetails(params.movieId),
    await getRecommendations(params.movieId),
    await getCredits(params.movieId),
    await getSimilar(params.movieId),
    await getReviews(params.movieId, "movie"),
  ];

  return {
    props: {
      movieDetails,
      movieRecommendations,
      movieCasts,
      movieSimilar,
      movieReviews,
    },
  };
};

export default MovieDetailsPage;
